1.	Did you complete all required sections and your product implements all required functionality of this assignment. 
If not state what is successfully implemented and what is not.

Yes, I completed all the required sections. I even implemented page-read overflow protection that should work for the majority of overflow cases.

2.	Write a simple pseudo-code that explains the design of your ReadAndFindDB.c algorithms

For sequential, it's pretty simple:
 * Allocate a search array of our given input so we can parse it easier:
    * While we can scan a string in our input:
        * Copy that string into the array
 * For every element in the array:
    * If it matches, return the index and exit
 * If nothing was found, return a NOTFOUND code.

For binary, it's simple as well:
 * Allocate a search array of our given input so we can parse it easier:
    * While we can scan a string in our input:
        * Copy that string into the array
 * Given a first and last record:
    * Compute a middle record. If our middle record is our string, return.
    * Else:
        * If our string compare is 'higher,' lower the high pointer.
        * Else, it's lower, increase the low pointer.
    * If nothing was found, return a NOTFOUND code.


3.	Profile the your solution and fill out the following table. Use the time utility to record the execution times for:
Search word	       | line num in file |	SequentialSearch (seconds) | InterpolationSearch (seconds)
"password"         | 71208            | 0.045	                   | 0.042s
"administrator”    | 20182            |	0.024	                   | 0.016s
"chubaka"          | N/A              | 0.058	                   | 0.048s
"chrisanakala1234” | N/A              | 0.058	                   | 0.048s
"PassW0sD"         | N/A              | 0.057	                   | 0.048s

4.	Sequential search is obviously slower than the Interpolation search. 
If you would keep the user level libraries in your code, how would you make the search faster for this inefficient implementation?
Since we know our list is sorted, we could early return once we're past where our input would be in the dict.

5.	What differentiates fscanf from fread, strcmp from memcmp and what makes some commands faster than others?
fread simply reads raw bytes, fscanf only accepts input in the given format
strcmp makes sure you're comparing strings, memcmp is just memory
Essentially, you're trading off safety for speed, which is not something you should have to do.

6.	Would you be able to rewrite the SequentialSearch using the user level libraries into the binary search algorithm? Please explain why?
I mean yes, you could just use fscanf to compare strings I guess.
You could also just use an actual binary search library for likely better performance.